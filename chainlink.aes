payable contract Registration =
    type i = int
    type s = string
    type a = address
    record chainee = {
        chainee : s,
        email : s,
        salary : i,
        jobType : s,
        days : i,
        js : s,
        hired : int,
        ownerAddress : a,
        id : i}
    record state = {
        chainees : map(i,chainee),
        chaineeLength : i}
 
    entrypoint init() = {chainees = {}, chaineeLength = 0}
    entrypoint chaineeLength() = 
        state.chaineeLength
    entrypoint getchaineeById(index : int)= 
        state.chainees[index]
        
    stateful entrypoint register(newchainee:s, newEmail:s, newsalary:i, newjobType:s, workingDays:i, jobSample:s) = 
        let newChainee = {
            chainee = newchainee,
            jobType = newjobType,
            email = newEmail,
            salary = newsalary,
            days = workingDays,
            js = jobSample,
            hired = 0,
            id = chaineeLength() + 1,
            ownerAddress = Call.caller}
        let index = chaineeLength() +1
        put(state{chainees[index] = newChainee, chaineeLength = index})
        "chainee has been added successfully"
    stateful payable entrypoint hireChainee(index : i) = 
        let employeeAddress = getchaineeById(index).ownerAddress
        require(Call.caller != employeeAddress, "You cannot hire yourself;)")
        let toBeHired = getchaineeById(index)
        Chain.spend(toBeHired.ownerAddress, toBeHired.salary)
        let hired = state.chainees[index].hired +1
        put(state{chainees[index].hired = hired })
        "Hired successfully"