payable contract Registration =


    record user = {
        chainee : s,
        email : s,
        salary : i,
        jobType : s,
        hours : i,
        js : s,
        hired : int,
        ownerAddress : a,
        id : i}

    record state = {
        users : map(i,user),
        userLength : i}
 
    entrypoint init() = {users = {}, userLength = 0}

    entrypoint userLength() = 
        state.userLength

    entrypoint getUserById(index : int)= 
        state.users[index]
        


    stateful entrypoint register(newEmail :s, newchainee:s, newsalary :i, newjobType :s, workingHours : i,  jobSample : s) = 
        let newUser = {
            chainee = newchainee,
            jobType = newjobType,
            email = newEmail,
            salary = newsalary,
            hours = workingHours,
            js = jobSample,
            hired = 0,

            id = userLength() + 1,
            ownerAddress = Call.caller}
        let index = userLength() +1
        put(state{users[index] = newUser, userLength = index})
        "New chainee has been added successfully"

    stateful payable entrypoint hireUser(index : i) = 
        let employeeAddress = getUserById(index).ownerAddress
        require(Call.caller != employeeAddress, "You cannot hire yourself;)")
        let toBeHired = getUserById(index)
        Chain.spend(toBeHired.ownerAddress, toBeHired.salary)
        let hired = state.users[index].hired +1
        put(state{users[index].hired = hired })
        "You successfully hired Freelancer"

    type i = int
    type s = string
    type a = address